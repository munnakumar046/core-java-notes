TreeMap
========
The underlying data structure is RED BLACK TREE.

Duplicate key is not allowed but value can be duplicate.

Insertion order is not preseved because it takes sorting order of key.

If we depend upon default natural sorting order then key must be homogeneous and Comparable.

If we depend upon customized sorting order then key must be hetrogeneous and Non-Comparable.

Key can't be null but value can be null.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeMap<Integer,String> tm=new TreeMap<Integer,String>();
		tm.put(10,"ten");
		tm.put(1,"one");
		tm.put(5,"five");
		tm.put(7,"seven");
		System.out.println(tm); // {1=one, 5=five, 7=seven, 10=ten}
		
		tm.put(1,"gogo");
		System.out.println(tm);//{1=gogo, 5=five, 7=seven, 10=ten}
		
		tm.put(4,null);
		System.out.println(tm); //{1=gogo, 4=null, 5=five, 7=seven, 10=ten}
		
		tm.put(null,"four");
		System.out.println(tm); //R.E NullPointerException
		
	}
}

Hashtable
=========
The underlying data structure is Hashtable.

Duplicate key is not allowed but value can be duplicate.

Insertion order is not preserved because it takes descending order of key.

Hetrogeneous objects are allowed for both key and value.

Null insertion is not possible for both key and value.

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Hashtable ht=new Hashtable();
		
		ht.put(1,"one");
		ht.put(10,"ten");
		ht.put(5,"five");
		ht.put(3,"three");
		System.out.println(ht);//{10=ten, 5=five, 3=three, 1=one}
		
		ht.put(1,"gogo");
		System.out.println(ht);//{10=ten, 5=five, 3=three, 1=gogo}
		
		ht.put("four",4);
		System.out.println(ht);//{10=ten, 5=five, four=4, 3=three, 1=gogo}
		
		//ht.put(6,null);
		//System.out.println(ht); //R.E NullPointerException
		
		//ht.put(null,"six");
		//System.out.println(ht); // R.E NullPointerException
	}
}

Diagram: class47.1



Q) Write a java program to display number of occurance of a given string?

input:
	This is is java class class 

output:
	This=1 is=2 java=1 class=2 

ex:
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="This is is java class class";
		String[] sarr=str.split(" ");
		
		Map<String,Integer> map=new LinkedHashMap<String,Integer>();
		
		for(String s:sarr)
		{
			if(map.get(s)!=null)
			{
				map.put(s,map.get(s)+1);
			}
			else
			{
				map.put(s,1);
			}
		}
		
		map.forEach((key,value)-> System.out.print(key+"="+value+" "));
	}
}

Q) Write a java program to display number of occurance of a given string?

input:
	java

output:
	j=1 a=2 v=1 

ex:

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="java";
		char[] carr=str.toCharArray();
		
		Map<Character,Integer> map=new LinkedHashMap<Character,Integer>();
		
		for(char c:carr)
		{
			if(map.get(c)!=null)
			{
				map.put(c,map.get(c)+1);
			}
			else
			{
				map.put(c,1);
			}
		}
		
		map.forEach((key,value)-> System.out.print(key+"="+value+" "));
	}
}

Q) Write a java program to display lucky number from given array?

input:
	1 1 2 3 3 3 4 4 

output:
	3 

ex:
---

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		int[] arr={1,1,2,3,3,3,4,4};
		System.out.println(luckyNumber(arr));
	}
	//callie method
	public static int luckyNumber(int[] arr)
	{
		Map<Integer,Integer> map=new HashMap<Integer,Integer>();
		
		for(int i:arr)
		{
			if(map.containsKey(i))
			{
				map.put(i,map.get(i)+1);
			}
			else
			{
				map.put(i,1);
			}
		}
		
		int x=0;
		int max=-1;
		
		for(Map.Entry<Integer,Integer> entry:map.entrySet())
		{
			if(entry.getKey() == entry.getValue())
			{
				x = entry.getKey();
				
				max = Math.max(x,max);
			}
		}
		
		return max;
	}
}


Types of Cursors in java
========================
Cursors are used to read the objects one by one from Collections.

We have three types of cursors.

1) Enumeration 

2) Iterator 

3) ListIterator 

1) Enumeration 
--------------
It is used to read the objects one by one from legacy Collection objects.

We can create Enumeration object as follow.

ex:
	Enumeration e=v.elements();

Enumeration interface contains two methods.
ex:
	public boolean hasMoreElements();
	public Object nextElement(); 

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector v=new Vector();
		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		System.out.println(v); //[1,2,3,4,5,6,7,8,9,10]
		
	
		Enumeration e=v.elements();
		while(e.hasMoreElements())
		{
			Integer i=(Integer)e.nextElement();
			System.out.print(i+" ");
		}
	
	}
}

Limitations with Enumeration
---------------------------
Enumeration is used to read objects one by one from legacy Collections objects only.Hence it is a not a universal cursor.

Using Enumeration we can perform read operation but not remove operation.

To overcome this limitation Sun Micro System introduced Iterator.

2) Iterator 
------------
Iterator is used to read objects one by one from any Collection object.Hence it is a universal cursor.

Using Iterator we can perform read and remove operations.

We can create Iterator object as follow.

ex:
	Iterator itr=al.iterator();

Iterator interface contains following three methods.

ex:
	public boolean hasNext();
	public Object next();
	public void remove();

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		
		for(int i=1;i<=10;i++)
		{
			al.add(i);
		}
		System.out.println(al);//[1,2,3,4,5,6,7,8,9,10]
		
		Iterator itr=al.iterator();
		while(itr.hasNext())
		{
			Integer i=(Integer)itr.next();
			if(i%2==0)
				System.out.println(i+" ");
			else
				itr.remove();
		}
	
		System.out.println(al);//[2,4,6,8,10]
	}
}

Limitations with Iterator
------------------------
Using Enumeration and Iterator we can read objects only in forward direction but not in backward direction.Hence they are not bi-directional cursors.

Using Iterator we can perform read and remove operations but not adding and replacement of new object.

To overcome this limitation Sun Micro System introduced ListIterator.


3) ListIterator
-------------
It is a child interface of Iterator interface.

ListIterator is used to read objects only from List Collection objects.

Using Listiterator we can perform read , remove, adding and replacement of new objects.

We can create ListIterator object as follow.
ex:
	ListIterator litr=al.listIterator();

ListIterator interface contains following methods.

ex:
	public boolean hasNext()
	public Object next()
	public void remove()
	public boolean hasPrevious()
	public Object previous()
	public int nextIndex()
	public int previousIndex()
	public void set(Object o)
	public void add(Object o)

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("venki");
		al.add("chiru");
		al.add("nag");
		
		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			System.out.println(s);
		}
	}
}


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("venki");
		al.add("chiru");
		al.add("nag");
		
		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("bala"))
			{
				litr.remove();	
			}
		}
		System.out.println(al); //[venki,chiru,nag]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("venki");
		al.add("chiru");
		al.add("nag");
		
		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("bala"))
			{
				litr.add("charan");	
			}
		}
		System.out.println(al); //[bala, charan, venki, chiru, nag]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("venki");
		al.add("chiru");
		al.add("nag");
		
		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("bala"))
			{
				litr.set("charan");	
			}
		}
		System.out.println(al); //[charan, venki, chiru, nag]
	}
}


Diagram: class47.2




















































































































































