Polymorphism
==============
polymorphism has taken from Greek word.

Here poly means many and morphism means forms.

The ability to represent in different forms is called polymorphism.

The main objective of polymorphism is to provide flexibility.

Diagram: class35.1

In java we have two types of polymorphism.

1) Compile time polymorphism / Static polymorphism / Early Binding

2) Runtime polymorphism / Dynamic polymorphism / Late Binding 


1) Compile time polymorphism
---------------------------
A polymorphism which exhibits at compile time is called compile time polymorphism.
ex:	
	Method overloading 
	Method Hiding 

2) Runtime polymorphism 
-----------------------
A polymorphism which exhibits at runtime is called runtime polymorphism.
ex:
	Method Overriding


Diagram: class35.2


Constructor
============
A constructor is a special method which is used to initialized an object.

Having same name as class name is called constructor.

A constructor will execute when we create an object.

A constructor does not allow any returntype.

A constructor will accept following modifiers.
ex:
	default 
	public 
	private 
	protected 

In java, constructors are divided into two types.

1) Userdefined constructor 

2) Default constructor 


1) Userdefined constructor 
--------------------------
Constructor which is created by the programmer or user based on the application requirement is called userdefined constructor.

It is classified into two types.

i) Zero Argument constructor 

ii) Parameterized constructor 

i) Zero Argument constructor 
-----------------------------
Suppose if we are not passing any argument to userdefined constructor then that constructor is called zero argument constructor.

ex:
---
class Test  
{
	Test()
	{
		System.out.println("0-arg const");
	}
	
	public static void main(String[] args) 
	{
		System.out.println("main-method");	
	}
}
o/p:
	main-method 

ex:
---
class Test  
{
	public Test()
	{
		System.out.println("0-arg const");
	}
	
	public static void main(String[] args) 
	{
		System.out.println("main-method");	
		Test t=new Test();Test t=new Test();
	}
}

ex:
---
class Test  
{
	private Test()
	{
		System.out.println("0-arg const");
	}
	
	public static void main(String[] args) 
	{
		Test t1=new Test();
		System.out.println("main-method");	
		Test t2=new Test();
	}
}
o/p:
	0-arg const
	main-method
	0-arg const

ex:
--
class Test  
{
	protected Test()
	{
		System.out.println("0-arg const");
	}
	
	public static void main(String[] args) 
	{
		Test t1=new Test();
		System.out.println("main-method");	
		Test t2=new Test();
	}
}
o/p:
	0-arg const
	main-method
	0-arg const




ii) Parameterized constructor 
-----------------------------
Suppose if we are passing atleast one argument to userdefined constructor then that constructor is called parameterized constructor.

ex
---
class Employee
{
	//current class variables 
	private int empId;
	private String empName;
	private double empSal;
	
	public Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	public void getEmployeeDetails()
	{
		System.out.println("Employee Id :"+empId);
		System.out.println("Employee Name :"+empName);
		System.out.println("Employee Salary :"+empSal);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Employee e=new Employee(101,"Alan Morries",1000d);
		e.getEmployeeDetails();
	}
}

2) Default constructor
------------------------
It is a compiler generated constructor for every java program where we are not defining atleast 
zero argument constructor.

To see the default constructor we need use below command.
ex:
	javap   -c   Test

Diagram: class35.3


Constructor Overloading
========================
Having same constructor name with different parameters or signatures in a single class is called constructor overloading.

eX:
---
class Test 
{
	Test()
	{
		System.out.println("0-arg const");
	}
	Test(int i)
	{
		System.out.println("int-arg const");
	}
	Test(double d)
	{
		System.out.println("double-arg const");
	}
	
	public static void main(String[] args)
	{
		Test t1=new Test();	
		Test t2=new Test(10);
		Test t3=new Test(10.5d);
	}
}

this keyword
===========
A this keyword is a java keyword which is used to refer current class object reference.

We can utility this keyword in following ways.

1) To refer current class variables

2) To refer current class methods

3) To refer current class constructors 


1) To refer current class variables
-----------------------------------
class A 
{
	int i=10;
	int j=20;
	
	A(int i,int j)
	{
		System.out.println(this.i+" "+this.j); // 10   20
		System.out.println(i+" "+j); // 100  200
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a=new A(100,200);
	}
}

2) To refer current class methods
------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
		this.m2();
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();
	}
}

3) To refer current class constructor
-------------------------------------
class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		this();
		System.out.println("int-arg const");
	}
	A(double d)
	{
		this(10);
		System.out.println("double-arg const");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a=new A(10.5d);
	}
}

super keyword
===========
A super keyword is a java keyword which is used to refer super class object reference.

We can utility super keyword in following ways.

1) To refer super class variables

2) To refer super class methods

3) To refer super class constructors 

1) To refer super class variables
----------------------------------
class A 
{
	int i=10;
	int j=20;
}
class B extends A 
{
	int i=100;
	int j=200;
	
	B(int i,int j)
	{
		System.out.println(i+" "+j); // 1000  2000
		System.out.println(this.i+" "+this.j); // 100  200
		System.out.println(super.i+" "+super.j); //10  20
	}
}
class Test
{
	public static void main(String[] args)
	{
		B b=new B(1000,2000);
	}
}

2) To refer super class methods
--------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		super.m1();
		System.out.println("M2-Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		B b=new B();
		b.m2();
	}
}

API
====
API stands for Application Programming interface.

It is a base for the programmer to develop software applications.

API is a collection of packages.

In java, API is divided into three types.

1) Predefined API 
-------------
	Built-in API is called predefined API.
	ex:
		https://docs.oracle.com/javase/8/docs/api/

2) Userdefined API 
----------------
	API which is created by the user based on the application requirements is called 
	userdefined API.


3) Third party API 
-------------
	API which is given by third party vendor is called third party API.
	ex:
		JAVAZOOM API
		iText API 
		and etc.


Interview Question
==================
Q) write a java program to display sub array equals to given sum?

input:
	arr = 1 2 3 7 6 
	
	sum = 12 

output:
	2 3 7 

approach1
---------

class Test
{
	public static void main(String[] args)
	{
		int[] arr ={1,2,3,7,6};
		
		int sum = 12;
		
		for(int i=0;i<arr.length;i++)
		{
			int currentSum=0;
			
			for(int j=i;j<arr.length;j++)
			{
				currentSum+=arr[j];
				
				if(currentSum==sum)
				{
					for(int k=i;k<=j;k++)
					{
						System.out.print(arr[k]+" ");
					}
				}
			}
		}
	}
}

approach2
----------

class Test
{
	public static void main(String[] args)
	{
		int[] arr ={1,2,3,7,5};
		
		int sum = 12;
		
		int cnt=0;
		
		for(int i=0;i<arr.length;i++)
		{
			int currentSum=0;
			
			for(int j=i;j<arr.length;j++)
			{
				currentSum+=arr[j];
				
				if(currentSum==sum)
				{
					cnt=1;
					
					for(int k=i;k<=j;k++)
					{
						System.out.print(arr[k]+" ");
					}
				}
			}
			if(cnt==1)
			{
				break;
			}
		}
	}
}





















































































