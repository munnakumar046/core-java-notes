Generics
==========
Arrays are typesafe. It means we can give guarantee that what type of elements are present in array.

If requirement is there to store String values then it is recommanded to use String[] array.

ex:
	String[] sarr=new String[5];
	sarr[0]="hi";
	sarr[1]="hello";
	sarr[2]=10;// C.T.E 

At the time of retrieving the data from array we don't need to perform typecasting.

ex:
	String[] sarr=new String[5];
	sarr[0]="hi";
	sarr[1]="hello";
	-
	-
	String val=sarr[0];

Collections are not typesafe.We can't give guarantee that what type of elements are present in Collections.

If requirement is there to store String values then it is never recommanded to use ArrayList because we won't get any compile time error or runtime error but sometimes our program get failure.

ex:
	ArrayList al=new ArrayList();
	al.add("hi");
	al.add("hello");
	al.add(10);

At the time of retrieving the data compulsary we need to perform typecasting.
	
ex:
	ArrayList al=new ArrayList();
	al.add("hi");
	al.add("hello");
	al.add(10);
	-
	-
	String s=(String)al.get(0);
	
To overcome this limitations Sun Micro System introduced Generics concept in 1.5v.

The main objective of generics are

1) To make Collections as typesafe.

2) To avoid typecasting problem. 


java.util package
=================

Q) What is the difference between Arrays and Collections?

Arrays						Collections
----------					-------------
It is a collection of homogeneous data 		It is a collection of homogeneous and hetrogeneous 
elements.					data elements.

Arrays are fixed in size.			Collections are growable in nature.

Performance point of view arrays are		Memory point of view Collections are recommanded 
recommanded to use.				to use.

Arrays not implemented based on data structure	Collections are implemented based on data structure 
concept.Hence we can't expect any readymade 	concept.Hence we can expect readymade methods.
method.

It can hold primitive types and object types.	It can hold only object types.


Collection Framework
=====================
It defines several interfaces and classes to represent group of objects in a single entity.


Collection
=============
Collection is an interface which is present in java.util package.

It is a root interface for entire collection framework.

If we want to represent group of individual objects in a single entity then we need to use Collection.

Collection interface contains common methods which are applicable for entire Collection objects.

ex:
	cmd> javap   java.util.Collection 

List
======
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicate objects are allowed and order is preserved then we need to use List interface.

Diagram: class44.1


ArrayList
=========
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements List, Serializable,Cloneable and RandomAccess interface.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		
		al.add(10);
		System.out.println(al); //[one,two,three,one,10]
		
		al.add(null);
		System.out.println(al); //[one,two,three,one,10,null]
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		
		System.out.println(al.isEmpty()); // false
		
		System.out.println(al.contains("one")); // true 
		
		al.add(1,"gogo");
		System.out.println(al); //[one,gogo,two,three]
		
		al.remove("gogo");
		System.out.println(al);//[one,two,three]
		
		al.clear();
		System.out.println(al); //[]
		
	}
}

ex
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		
		for(int i=0;i<al.size();i++)
		{
			String s= al.get(i);
			System.out.println(s);
		}
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<String> list=new ArrayList<String>();
		list.add("one");
		list.add("two");
		list.add("three");
		
		for(int i=0;i<list.size();i++)
		{
			String s= list.get(i);
			System.out.println(s);
		}
		
	}
}


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(7,3,9,1,2,5);
		
		System.out.println(list);
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al1=new ArrayList<String>();
		al1.add("HTML");
		al1.add("CSS");
		al1.add("JAVA");
		al1.add("ORACLE");
		al1.add("FRAMEWORK");
		
		ArrayList<String> al2=new ArrayList<String>();
		al2.add("HTML");
		al2.add("CSS");
		al2.add("DOTNET");
		al2.add("SQLSERVER");
		al2.add("FRAMEWORK");
		
		al1.retainAll(al2);
		
		System.out.println(al1);//[HTML, CSS, FRAMEWORK]
		
	}
}



LinkedList
============
The underlying data structure is doubly LinkedList.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements List, Serializable,Cloneable and Deque interface.

LinkedList interface contains following methods.
ex:
	public E getFirst();
  	public E getLast();
  	public E removeFirst();
  	public E removeLast();
 	public void addFirst(E);
  	public void addLast(E);

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList ll=new LinkedList();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]
		ll.add("one");
		System.out.println(ll);//[one,two,three,one]
		ll.add(10);
		System.out.println(ll);//[one,two,three,one,10]
		ll.add(null);
		System.out.println(ll);//[one,two,three,one,10,null]
	}
}

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList ll=new LinkedList();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]
		
		ll.addFirst("gogo");
		ll.addLast("jojo");
		System.out.println(ll);//[gogo,one,two,three,jojo]
		
		System.out.println(ll.getFirst());
		System.out.println(ll.getLast());
		
		ll.removeFirst();
		ll.removeLast();
		System.out.println(ll);//[one,two,three]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll1=new LinkedList<String>();
		ll1.add("one");
		ll1.add("two");
		ll1.add("three");
		System.out.println(ll1);//[one,two,three]
		
		LinkedList<String> ll2=new LinkedList<String>();
		ll2.add("raja");
		System.out.println(ll2);//[raja]
		
		ll2.addAll(ll1);
		System.out.println(ll2);//[raja,one,two,three]

		System.out.println(ll2.containsAll(ll1)); // true 
		
		ll2.removeAll(ll1);
		System.out.println(ll2);//[raja]
	}
}

Vector 
========
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements List, Serializable,Cloneable and RandomAccess interface.

All methods present in Vector are synchronized.

Vector class contains following methods.

ex:
	addElement()
	removeElementAt()
	removeAllElements()
	firstElement()
	lastElement()
	and etc.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector<Integer> v=new Vector<Integer>();
		
		System.out.println(v.capacity()); //10
		
		for(int i=1;i<=10;i++)
		{
			v.addElement(i);
		}
		System.out.println(v); //[1,2,3,4,5,6,7,8,9,10]
		
		System.out.println(v.firstElement());//1
		System.out.println(v.lastElement());//10
		
		v.removeElementAt(5);
		System.out.println(v);//[1, 2, 3, 4, 5, 7, 8, 9, 10]
		
		v.removeAllElements();
		System.out.println(v); //[]
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector<Integer> v=new Vector<Integer>();
		
		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		System.out.println(v); //[1,2,3,4,5,6,7,8,9,10]
		
		System.out.println(v.get(0));//1
		System.out.println(v.get(v.size()-1));//10
		
		v.remove(5);
		System.out.println(v);//[1, 2, 3, 4, 5, 7, 8, 9, 10]
		
		v.clear();
		System.out.println(v); //[]
	}
}

































































