Various ways to prevent a thread from execution
===============================================
There are three ways to prevent(stop) a thread from execution.

1) yield()

2) join()

3) sleep() 


1) yield()
-----------
It pause the current execution thread and gives the chance to other threads having same
priority.

If there is no waiting threads or low priority threads then same thread will continue 
it's execution.

If multiple waiting threads having same priority then we can't expect any execution order.

ex:
	public static native void yield();

Diagram: class49.1

class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			Thread.currentThread().yield();
			System.out.println("Child-Thread");
		}
	}
}
class  Test 
{
	public static void main(String[] args) 
	{
		MyThread t=new MyThread();
		t.start();
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

2) join()
----------
If a thread wants to wait untill the completion of some other threads then we need to 
join().

A join() method throws one checked exception called InterruptedException so we must 
and should handle that exception by using try and catch block or by using throws stmt.

ex:
	public final void join()throws InterruptedException
	public final void join(long ms)throws InterruptedException 
	public final void join(long ms,int ns)throws InterruptedException

Diagram: class49.2

class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
		}
	}
}
class  Test 
{
	public static void main(String[] args)throws InterruptedException
	{
		MyThread t=new MyThread();
		t.start();
		t.join();
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}

3) sleep() 
-----------
If a thread don't want to perform any operation on perticular amount of time then we 
need to use sleep() method.

A sleep() method throws one checked exception so we must and should handle that exception
by using try and catch block or by using throws statement.

ex:
	public static native void sleep()throws InterruptedException 
	public static native void sleep(long ms)throws InterruptedException 
	public static native void sleep(long ms,int ns)throws InterruptedException 

Diagram: class49.3

ex:
---
class MyThread extends Thread 
{
	public void run()
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println("Child-Thread");
			try
			{
				Thread.sleep(2000);
			}
			catch (InterruptedException ie)
			{
				ie.printStackTrace();
			}
		}
	}
}
class  Test 
{
	public static void main(String[] args)
	{
		MyThread t=new MyThread();
		t.start();
		for(int i=1;i<=5;i++)
		{
			System.out.println("Parent-Thread");
		}
	}
}


Problem without synchronization
===============================
If there is no sychronization then we will face following problems.

1) Data inconsistency 

2) Thread interference

ex:
---
class Table 
{
	void printTable(int n)
	{
		for(int i=1;i<=5;i++)
		{
			System.out.println(n*i);
			try
			{
				Thread.sleep(2000);
			}
			catch (InterruptedException ie)
			{
				ie.printStackTrace();
			}
		}
	}
}
class MyThread1 extends Thread 
{
	Table t;
	MyThread1(Table t)
	{
		this.t=t;
	}
	public void run()
	{
		t.printTable(5);
	}
}
class MyThread2 extends Thread 
{
	Table t;
	MyThread2(Table t)
	{
		this.t=t;
	}
	public void run()
	{
		t.printTable(10);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Table obj=new Table();
		MyThread1 t1=new MyThread1(obj);
		MyThread2 t2=new MyThread2(obj);

		t1.start();
		t2.start();
	}
}

synchronization
================
A synchronized keyword is applicable for methods and blocks.

A synchronization is allowed one thread to execute given object.Hence we achieve thread safety.

The main advantage of synchronization is we solve data inconsistence problem.

The main disadvantage of synchronization is ,it will increase waiting time of a thread which reduce the performance of the system.

If there is no specific requirement then it is never recommanded to use synchronization concept.

synchronization internally uses lock mechanism.

Whenever a thread wants to access object , first it has to acquire lock of an object and thread will release the lock when it completes it's task.

When a thread wants to execute synchronized method.It automatically gets the lock of an object.

When one thread is executing synchronized method then other threads are not allowed to execute other synchronized methods in a same object concurently.But other threads are allowed to execute non-synchronized method concurently.

ex:
class Table
{
	synchronized void printTable(int n)
	{
		for(int i=1;i<=5;i++)
		{
				System.out.println(n*i);
				try
				{
					Thread.sleep(2000);
				}
				catch (InterruptedException ie)
				{
					ie.printStackTrace();
				}
		}
	}
}
class MyThread1 extends Thread
{
	Table t;
	MyThread1(Table t)
	{
		this.t=t;
	}
	public void run()
	{
		t.printTable(5);
	}
}

class MyThread2 extends Thread
{
	Table t;
	MyThread2(Table t)
	{
		this.t=t;
	}
	public void run()
	{
		t.printTable(10);
	}
}

class Test 
{
	public static void main(String[] args)
	{
		Table obj=new Table();
		MyThread1 t1=new MyThread1(obj);
		MyThread2 t2=new MyThread2(obj);

		t1.start();
		t2.start();
	}
}

synchronized block
====================
If we want to perform synchronization on specific resource of a program then we need to use 
synchronization.

ex:
	If we have 100 lines of code and if we want to perform synchronization only for 
	10 lines then we need to use synchronized block.

If we keep all the logic in synchronized block then it will act as a synchronized method.

ex:
class Table
{
	 void printTable(int n)
	{
		synchronized(this)
		{
		for(int i=1;i<=5;i++)
		{
				System.out.println(n*i);
				try
				{
					Thread.sleep(2000);
				}
				catch (InterruptedException ie)
				{
					ie.printStackTrace();
				}
		}
		}//sync
	}
}
class MyThread1 extends Thread
{
	Table t;
	MyThread1(Table t)
	{
		this.t=t;
	}
	public void run()
	{
		t.printTable(5);
	}
}

class MyThread2 extends Thread
{
	Table t;
	MyThread2(Table t)
	{
		this.t=t;
	}
	public void run()
	{
		t.printTable(10);
	}
}

class Test 
{
	public static void main(String[] args)
	{
		Table obj=new Table();
		MyThread1 t1=new MyThread1(obj);
		MyThread2 t2=new MyThread2(obj);

		t1.start();
		t2.start();
	}
}



3)Static synchronization
=====================
In static synchronization the lock will be on class but not on object.

If we declare any static method as synchronized then it is called static synchronization method.

ex:
class Table
{
	static synchronized void printTable(int n)
	{
	
		for(int i=1;i<=5;i++)
		{
				System.out.println(n*i);
				try
				{
					Thread.sleep(2000);
				}
				catch (InterruptedException ie)
				{
					ie.printStackTrace();
				}
		}
		
	}
}
class MyThread1 extends Thread
{
	
	public void run()
	{
		Table.printTable(5);
	}
}

class MyThread2 extends Thread
{

	public void run()
	{
		Table.printTable(10);
	}
}

class Test 
{
	public static void main(String[] args)
	{
		
		MyThread1 t1=new MyThread1();
		MyThread2 t2=new MyThread2();

		t1.start();
		t2.start();
	}
}



.Inter-Thread Communication
==========================
Two threads can communicate with one another by using wait(),notify() and notifyAll() method.

The Thread which is expecting updations it has to wait() method and the thread which is performing updations it has to call notify() method.

wait(),notify() and notifyAll() method present in Object class but not in Thread class.

To call wait(),notify() and notifyAll() method our current thread must be in a synchronized area otherwise we will get IllegalMonitorStateException.

Once a thread calls wait() method on a given object ,1st it will release the lock of that  object immediately and entered into waiting state. 

 Once a thread calls notify() and notifyAll() method on a given object.It will release the lock of that object but not immediately.

Except wait(),notify() and notifyAll() method ,there is no such concept where lock release can happen.

ex:
class MyThread extends Thread
{
	int total=0;
	public void run()
	{
		
		synchronized(this)
		{
				System.out.println("Child Thread started calculation");
				for(int i=1;i<=10;i++)
				{
					total=total+i;
				}
				System.out.println("Child thread giving notification");
				this.notify();
		}
	}
}
class Test
{
	public static void main(String[] args)throws InterruptedException
	{
		MyThread t=new MyThread();
		t.start();
		synchronized(t)
		{
			System.out.println("Main Thread waiting for updating");
			t.wait();
			System.out.println("Main -Thread got notification ");
			System.out.println(t.total);
		}
	}
}


DeadLock in java
===============
DeadLock will occur in a suitation when one thread is waiting to access 
object lock which is acquired by another thread and that thread is waiting
to access object lock which is acquired by first thread.

Here both the threads are waiting release the thread but no body will 
release such situation is called DeadLock.

ex:

class Test
{
	public static void main(String[] args)
	{
		final String res1="hi";
		final String res2="bye";

		Thread t1=new Thread()
		{
			public void run()
			{
				synchronized(res1)
				{
					System.out.println("Thread1: Locking Resource 1");
					synchronized(res2)
					{
						System.out.println("Thread1: Locking Resource2");
					}
				}
			}
		};

		Thread t2=new Thread()
		{
			public void run()
			{
				synchronized(res2)
				{
					System.out.println("Thread2: Locking Resource 2");
					synchronized(res1)
					{
						System.out.println("Thread1: Locking Resource 1");
					}
				}
			}
		};

		t1.start();
		t2.start();
	}
}

Drawbacks of multithreading
======================
1)DeadLock
2)Thread Starvation


































